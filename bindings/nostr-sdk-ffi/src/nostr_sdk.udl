// Copyright (c) 2022-2023 Yuki Kishimoto
// Distributed under the MIT software license

namespace nostr_sdk {
    // Nostr
    [Throws=NostrError]
    sequence<u8> generate_shared_key(SecretKey secret_key, PublicKey public_key);

    [Throws=NostrError]
    string nip04_encrypt(SecretKey secret_key, PublicKey public_key, string content);
    [Throws=NostrError]
    string nip04_decrypt(SecretKey secret_key, PublicKey public_key, string encrypted_content);

    [Throws=NostrError]
    void verify_nip05(PublicKey public_key, string nip05, string? proxy);
    [Throws=NostrError]
    Profile get_nip05_profile(string nip05, string? proxy);

    [Throws=NostrError]
    string nip44_encrypt(SecretKey secret_key, PublicKey public_key, string content, NIP44Version version);
    [Throws=NostrError]
    string nip44_decrypt(SecretKey secret_key, PublicKey public_key, string payload);

    [Throws=NostrError]
    UnsignedEvent extract_rumor_from_gift_wrap(Keys keys, Event gift_wrap);

    // Nostr SDK
    [Throws=NostrSdkError]
    void init_logger(LogLevel level);
};

[Error]
interface NostrSdkError {
    Generic(string err);
};

enum LogLevel {
    "Error",
    "Warn",
    "Info",
    "Debug",
    "Trace",
};

// NOSTR

[Error]
interface NostrError {
    Generic(string err);
};

enum NIP44Version {
    "XChaCha20",
};

interface RelayInformationDocument {
    [Throws=NostrError, Name=get]
    constructor(string url, string? proxy);
    string? name();
    string? description();
    string? pubkey();
    string? contact();
    sequence<u16>? supported_nips();
    string? software();
    string? version();
};

interface NostrConnectURI {
    [Throws=NostrError, Name=from_string]
    constructor(string uri);
    PublicKey public_key();
    string relay_url();
    string name();
    string? url();
    string? description();
};

interface Profile {
    constructor(PublicKey public_key, sequence<string> relays);
    [Throws=NostrError, Name=from_bech32]
    constructor(string bech32);
    [Throws=NostrError, Name=from_nostr_uri]
    constructor(string uri);
    [Throws=NostrError]
    string to_bech32();
    [Throws=NostrError]
    string to_nostr_uri();
    PublicKey public_key();
    sequence<string> relays();
};

interface ImageDimensions {
    constructor(u64 width, u64 height);
    u64 width();
    u64 height();
};

interface Timestamp {
    [Name=now]
    constructor();
    [Name=from_secs]
    constructor(u64 secs);
    u64 as_secs();
    string to_human_datetime();
};

interface SecretKey {
    [Throws=NostrError, Name=from_hex]
    constructor(string hex);
    [Throws=NostrError, Name=from_bech32]
    constructor(string sk);
    [Throws=NostrError, Name=from_bytes]
    constructor(sequence<u8> sk);
    string to_hex();
    [Throws=NostrError]
    string to_bech32();
};

interface PublicKey {
    [Throws=NostrError, Name=from_hex]
    constructor(string hex);
    [Throws=NostrError, Name=from_bech32]
    constructor(string pk);
    [Throws=NostrError, Name=from_bytes]
    constructor(sequence<u8> pk);
    [Throws=NostrError, Name=from_nostr_uri]
    constructor(string uri);
    string to_hex();
    [Throws=NostrError]
    string to_bech32();
    [Throws=NostrError]
    string to_nostr_uri();
};

interface Keys {
    constructor(SecretKey sk);
    [Name=from_public_key]
    constructor(PublicKey pk);
    [Throws=NostrError, Name=from_sk_str]
    constructor(string sk);
    [Throws=NostrError, Name=from_pk_str]
    constructor(string pk);
    [Name=generate]
    constructor();
    [Throws=NostrError, Name=vanity]
    constructor(sequence<string> prefixes, boolean bech32, u8 num_cores);
    [Throws=NostrError, Name=from_mnemonic]
    constructor(string mnemonic, optional string? passphrase = null);
    PublicKey public_key();
    [Throws=NostrError]
    SecretKey secret_key();
};

[Enum]
interface ClientMessage {
  Ev(string event);
  Req(string subscription_id, sequence<string> filters);
  Count(string subscription_id, sequence<string> filters);
  Close(string subscription_id);
  Auth(string event);
};

[Enum]
interface RelayMessage {
  Ev(string subscription_id, string event);
  Notice(string message);
  EndOfStoredEvents(string subscription_id);
  Ok(string event_id, boolean status, string message);
  Auth(string challenge);
  Count(string subscription_id, u64 count);
};

interface ZapRequestData {
    constructor(PublicKey public_key, sequence<string> relays);
    [Self=ByArc]
    ZapRequestData amount(u64 amount);
    [Self=ByArc]
    ZapRequestData lnurl(string lnurl);
    [Self=ByArc]
    ZapRequestData event_id(EventId event_id);
};

enum Alphabet {
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
};

interface Filter {
    constructor();
    [Self=ByArc]
    Filter id(string id);
    [Self=ByArc]
    Filter ids(sequence<string> ids);
    [Self=ByArc]
    Filter author(string author);
    [Self=ByArc]
    Filter authors(sequence<string> authors);
    [Self=ByArc]
    Filter kind(u64 kind);
    [Self=ByArc]
    Filter kinds(sequence<u64> kinds);
    [Self=ByArc]
    Filter event(EventId event_id);
    [Self=ByArc]
    Filter events(sequence<EventId> ids);
    [Self=ByArc]
    Filter pubkey(PublicKey pubkey);
    [Self=ByArc]
    Filter pubkeys(sequence<PublicKey> pubkeys);
    [Self=ByArc]
    Filter identifier(string identifier);
    [Self=ByArc]
    Filter search(string text);
    [Self=ByArc]
    Filter since(Timestamp timestamp);
    [Self=ByArc]
    Filter until(Timestamp timestamp);
    [Self=ByArc]
    Filter limit(u64 limit);
    [Self=ByArc]
    Filter custom_tag(Alphabet tag, sequence<string> content);
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();
};

interface EventId {
    [Throws=NostrError]
    constructor(PublicKey pubkey, Timestamp created_at, u64 kind, sequence<sequence<string>> tags, string content);
    [Throws=NostrError, Name=from_bytes]
    constructor(sequence<u8> bytes);
    [Throws=NostrError, Name=from_hex]
    constructor(string hex);
    [Throws=NostrError, Name=from_bech32]
    constructor(string id);
    [Throws=NostrError, Name=from_nostr_uri]
    constructor(string uri);
    sequence<u8> as_bytes();
    string to_hex();
    [Throws=NostrError]
    string to_bech32();
    [Throws=NostrError]
    string to_nostr_uri();
};

interface UnsignedEvent {
    EventId id();
    PublicKey pubkey();
    Timestamp created_at();
    u64 kind();
    sequence<Tag> tags();
    string content();
    [Throws=NostrError]
    Event sign(Keys keys);
    [Throws=NostrError]
    Event add_signature(string sig);
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();
};

interface Event {
    EventId id();
    PublicKey pubkey();
    Timestamp created_at();
    u64 kind();
    sequence<Tag> tags();
    string content();
    string signature();
    boolean verify();
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();
};

interface EventBuilder {
    [Throws=NostrError]
    constructor(u64 kind, string content, sequence<Tag> tags);
    [Throws=NostrError]
    Event to_event(Keys keys);
    [Throws=NostrError]
    Event to_anonymous_event();
    UnsignedEvent to_unsigned_event(PublicKey public_key);
    [Throws=NostrError]
    Event to_pow_event(Keys keys, u8 difficulty);
    [Throws=NostrError]
    Event to_anonymous_pow_event(u8 difficulty);
    UnsignedEvent to_unsigned_pow_event(PublicKey public_key, u8 difficulty);

    [Name=set_metadata]
    constructor(Metadata metadata);
    [Throws=NostrError, Name=add_recommended_relay]
    constructor(string url);
    [Throws=NostrError, Name=new_text_note]
    constructor(string content, sequence<Tag> tags);
    [Throws=NostrError, Name=long_form_text_note]
    constructor(string content, sequence<Tag> tags);
    [Name=repost]
    constructor(EventId event_id, PublicKey public_key);
    [Name=set_contact_list]
    constructor(sequence<Contact> list);
    [Throws=NostrError, Name=new_encrypted_direct_msg]
    constructor(Keys sender_keys, PublicKey receiver_pubkey, string content, EventId? reply);
    [Name=delete]
    constructor(sequence<EventId> ids, optional string? reason = null);
    [Name=new_reaction]
    constructor(EventId event_id, PublicKey public_key, string content);

    [Name=new_channel]
    constructor(Metadata metadata);
    [Throws=NostrError, Name=set_channel_metadata]
    constructor(string channel_id, string? relay_url, Metadata metadata);
    [Throws=NostrError, Name=new_channel_msg]
    constructor(string channel_id, string relay_url, string content);
    [Name=hide_channel_msg]
    constructor(EventId message_id, string? reason);
    [Name=mute_channel_user]
    constructor(PublicKey public_key, string? reason);

    [Throws=NostrError, Name=auth]
    constructor(string challenge, string relay_url);

    [Name=report]
    constructor(sequence<Tag> tags, string content);

    [Name=new_zap_request]
    constructor(ZapRequestData data);
    [Name=new_zap_receipt]
    constructor(string bolt11, string? preimage, Event zap_request);

    [Name=file_metadata]
    constructor(string description, FileMetadata metadata);
};

interface Contact {
    constructor(PublicKey pk, optional string? relay_url = null, optional string? alias = null);
    string? alias();
    PublicKey public_key();
    string? relay_url();
};

interface Metadata {
    constructor();

    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();

    [Self=ByArc]
    Metadata set_name(string name);
    [Self=ByArc]
    Metadata set_display_name(string display_name);
    [Self=ByArc]
    Metadata set_about(string about);
    [Throws=NostrError, Self=ByArc]
    Metadata set_website(string website);
    [Throws=NostrError, Self=ByArc]
    Metadata set_picture(string picture);
    [Throws=NostrError, Self=ByArc]
    Metadata set_banner(string banner);
    [Self=ByArc]
    Metadata set_nip05(string nip05);
    [Self=ByArc]
    Metadata set_lud06(string lud06);
    [Self=ByArc]
    Metadata set_lud16(string lud16);

    string? get_name();
    string? get_display_name();
    string? get_about();
    string? get_website();
    string? get_picture();
    string? get_banner();
    string? get_nip05();
    string? get_lud06();
    string? get_lud16();
};

interface FileMetadata {
    [Throws=NostrError]
    constructor(string url, string mime_type, string hash);
    [Self=ByArc]
    FileMetadata aes_256_gcm(string key, string iv);
    [Self=ByArc]
    FileMetadata size(u64 size);
    [Self=ByArc]
    FileMetadata dimensions(ImageDimensions dim);
    [Self=ByArc]
    FileMetadata magnet(string magnet);
    [Self=ByArc]
    FileMetadata blurhash(string blurhash);
};

[Enum]
interface TagKind {
  Known(TagKindKnown known);
  Unknown(string unknown);
};

enum TagKindKnown {
    "P",
    "E",
    "R",
    "T",
    "G",
    "D",
    "A",
    "I",
    "M",
    "U",
    "X",
    "RelayUrl",
    "Nonce",
    "Delegation",
    "ContentWarning",
    "Expiration",
    "Subject",
    "Challenge",
    "Title",
    "Image",
    "Thumb",
    "Summary",
    "PublishedAt",
    "Description",
    "Bolt11",
    "Preimage",
    "Relays",
    "Amount",
    "Lnurl",
    "Name",
    "Url",
    "Aes256Gcm",
    "Size",
    "Dim",
    "Magnet",
    "Blurhash",
    "Streaming",
    "Recording",
    "Starts",
    "Ends",
    "Status",
    "CurrentParticipants",
    "TotalParticipants",
    "Method",
    "Payload",
    "Anon",
    "Proxy",
};

[Enum]
interface TagEnum {
    Unknown(TagKind kind, sequence<string> data);
    E(string event_id, string? relay_url, string? marker);
    PubKey(string public_key, string? relay_url);
    EventReport(string event_id, string report);
    PubKeyReport(string public_key, string report);
    PubKeyLiveEvent(string pk, string? relay_url, string marker, string? proof);
    Reference(string reference);
    RelayMetadata(string relay_url, string? rw);
    Hashtag(string hashtag);
    Geohash(string geohash);
    Identifier(string identifier);
    ExternalIdentity(string identity, string proof);
    A(u64 kind, string public_key, string identifier, string? relay_url);
    RelayUrl(string relay_url);
    ContactList(string pk, string? relay_url, string? alias);
    POW(string nonce, u8 difficulty);
    Delegation(string delegator_pk, string conditions, string sig);
    ContentWarning(string? reason);
    Expiration(u64 timestamp);
    Subject(string subject);
    Challenge(string challenge);
    Title(string title);
    Image(string url, string? dimensions);
    Thumb(string url, string? dimensions);
    Summary(string summary);
    Description(string desc);
    Bolt11(string bolt11);
    Preimage(string preimage);
    Relays(sequence<string> urls);
    Amount(u64 amount);
    Lnurl(string lnurl);
    Name(string name);
    PublishedAt(u64 timestamp);
    Url(string url);
    MimeType(string mime);
    Aes256Gcm(string key, string iv);
    Sha256(string hash);
    Size(u64 size);
    Dim(string dimensions);
    Magnet(string uri);
    Blurhash(string blurhash);
    Streaming(string url);
    Recording(string url);
    Starts(u64 timestamp);
    Ends(u64 timestamp);
    Status(string status);
    CurrentParticipants(u64 num);
    TotalParticipants(u64 num);
    AbsoluteURL(string url);
    Method(string method);
    Payload(string hash);
    Anon(string? msg);
    Proxy(string id, string protocol);
}; 

interface Tag {
    [Throws=NostrError, Name=parse]
    constructor(sequence<string> data);
    [Throws=NostrError, Name=from_enum]
    constructor(TagEnum e);
    TagEnum as_enum();
    sequence<string> as_vec();
    TagKind kind();
};

// NOSTR-SDK

interface RelayConnectionStats {
    u64 attempts();
    u64 success();
    u64 bytes_sent();
    u64 bytes_received();
    duration? latency();
    Timestamp connected_at();
};

enum RelayStatus {
    "Initialized",
    "Connected",
    "Connecting",
    "Disconnected",
    "Stopped",
    "Terminated",
};

interface ActiveSubscription {
    string id();
    sequence<Filter> filters();
};

interface Relay {
    string url();
    string? proxy();
    RelayStatus status();
    boolean is_connected();
    RelayInformationDocument document();
    record<DOMString, ActiveSubscription> subscriptions();
    void update_subscription_filters(string internal_id, sequence<Filter> filters);
    RelayConnectionStats stats();
    u64 queue();

    void connect(boolean wait_for_connection);
    [Throws=NostrSdkError]
    void stop();
    [Throws=NostrSdkError]
    void terminate();

    [Throws=NostrSdkError]
    void send_msg(ClientMessage msg, duration? wait);
    [Throws=NostrSdkError]
    void subscribe(sequence<Filter> filters, duration? wait);
    [Throws=NostrSdkError]
    void unsubscribe(duration? wait);

    [Throws=NostrSdkError]
    sequence<Event> get_events_of(sequence<Filter> filters, duration? timeout);
    void req_events_of(sequence<Filter> filters, duration? timeout);
};

interface Options {
    constructor();
    [Self=ByArc]
    Options wait_for_connection(boolean wait);
    [Self=ByArc]
    Options wait_for_send(boolean wait);
    [Self=ByArc]
    Options wait_for_ok(boolean wait);
    [Self=ByArc]
    Options wait_for_subscription(boolean wait);
    [Self=ByArc]
    Options difficulty(u8 difficulty);
    [Self=ByArc]
    Options req_filters_chunk_size(u8 req_filters_chunk_size);
    [Self=ByArc]
    Options timeout(duration? timeout);
    [Self=ByArc]
    Options send_timeout(duration? send_timeout);
    [Self=ByArc]
    Options nip46_timeout(duration? nip46_timeout);
};

interface Client {
    constructor(Keys keys);
    [Name=with_opts]
    constructor(Keys keys, Options opts);

    void update_difficulty(u8 difficulty);
    Keys keys();

    void start();
    [Throws=NostrSdkError]
    void stop();
    boolean is_running();
    [Throws=NostrSdkError]
    void shutdown();
    void clear_already_seen_events();

    record<DOMString, Relay> relays();
    [Throws=NostrSdkError]
    Relay relay(string url);
    [Throws=NostrSdkError]
    void add_relay(string url, optional string? proxy = null);
    [Throws=NostrSdkError]
    void remove_relay(string url);
    [Throws=NostrSdkError]
    void connect_relay(string url);
    [Throws=NostrSdkError]
    void disconnect_relay(string url);
    void connect();
    [Throws=NostrSdkError]
    void disconnect();

    void subscribe(sequence<Filter> filters);
    void unsubscribe();

    [Throws=NostrSdkError]
    sequence<Event> get_events_of(sequence<Filter> filters, duration? timeout);
    void req_events_of(sequence<Filter> filters, duration? timeout);

    [Throws=NostrSdkError]
    void send_msg(ClientMessage msg);
    [Throws=NostrSdkError]
    void send_msg_to(string url, ClientMessage msg);
    [Throws=NostrSdkError]
    EventId send_event(Event event);
    [Throws=NostrSdkError]
    EventId send_event_to(string url, Event event);

    [Throws=NostrSdkError]
    EventId set_metadata(Metadata metadata);
    [Throws=NostrSdkError]
    EventId file_metadata(string description, FileMetadata metadata);

    [Self=ByArc]
    void handle_notifications(HandleNotification handler);
};

callback interface HandleNotification {
    void handle_msg(string relay_url, RelayMessage msg);
    void handle(string relay_url, Event event);
};
